drop database if exists devel;
create database devel;
use devel;

CREATE TABLE addresses
(
	ID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT, -- defines an entry's unique table ID. hopefully this auto increments for each insert
	street varchar(50),
	city varchar(50),
	state_ varchar(50), -- state is an SQL keyword 'state_' is my solution
	zip varchar(50),
	phone varchar(50),
	PRIMARY KEY (ID)
) ENGINE=INNODB; -- this line makes the table ACID safe

--  Table stores previous employers, entries. see: hasPrevEmployer
--  date accepts string of format 'YYYYMMDD'
CREATE TABLE prevEmployers
(
	ID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	employer varchar(50),
	supervisor varchar(50),
	position varchar(50),	
	leaveReason varchar(500),
	resp varchar(500),
	startDate date,
	endDate date,
	startSalery DECIMAL(10,2),
	endSalery DECIMAL(10,2),
	fk_address SMALLINT UNSIGNED, -- this references a specific address in the 'addresses' table. I use fk_ to signify this type of reference
	PRIMARY KEY (ID),
	FOREIGN KEY (fk_address) REFERENCES addresses(ID) ON DELETE CASCADE
) ENGINE=INNODB;

CREATE TABLE attendedSchools
(
	ID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	name varchar(50),
	fk_address SMALLINT UNSIGNED,
	PRIMARY KEY (ID),
	FOREIGN KEY (fk_address) REFERENCES addresses(ID)
) ENGINE=INNODB;

CREATE TABLE people
(
	ID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	isApplicant bit(1),
	isEmployee bit(1),
	fName varchar(50),
	mName varchar(50),
	lName varchar(50),
	fk_address SMALLINT UNSIGNED,
	PRIMARY KEY (ID),
	FOREIGN KEY (fk_address) REFERENCES addresses(ID)
) ENGINE=INNODB;

-- tables with 'has' at the begining of the title combine a dynamic num entries in one table to many entries in another. in hasPrevEmployer, each entry associates a person in 'people' to a 'prevEmployer' entry: this allows each person to have a dynamic number of previous employers.
CREATE TABLE hasPrevEmployer
(
	fk_prevEmployer SMALLINT UNSIGNED NOT NULL,
	fk_person SMALLINT UNSIGNED NOT NULL,
	PRIMARY KEY (fk_prevEmployer, fk_person),
	FOREIGN KEY (fk_prevEmployer) REFERENCES prevEmployers(ID),
	FOREIGN KEY (fk_person) REFERENCES people(ID)
) ENGINE=INNODB;

CREATE TABLE hasAttendedSchools
(
	fk_attendedSchool SMALLINT UNSIGNED NOT NULL,
	fk_person SMALLINT UNSIGNED NOT NULL,
	PRIMARY KEY (fk_attendedSchool, fk_person), -- defines a composite primary key. there can only be one entry that ties a specific school to a specific person
	FOREIGN KEY (fk_attendedSchool) REFERENCES attendedSchools(ID),
	FOREIGN KEY (fk_person) REFERENCES people(ID)
) ENGINE=INNODB;

CREATE TABLE positions
(
	ID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	title varchar(50),
	description varchar(500),
	PRIMARY KEY (ID)
) ENGINE=INNODB;

CREATE TABLE hasApplication
(
	fk_person SMALLINT UNSIGNED NOT NULL,
	fk_position SMALLINT UNSIGNED NOT NULL,
	PRIMARY KEY (fk_person, fk_position),
	FOREIGN KEY (fk_person) REFERENCES people(ID),
	FOREIGN KEY (fk_position) REFERENCES positions(ID)
)  ENGINE=INNODB;

CREATE TABLE questions
(
	ID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	question varchar(500),
	PRIMARY KEY (ID)
) ENGINE=INNODB;

CREATE TABLE generalAnswers
(
	answer varchar(500),
	fk_person SMALLINT UNSIGNED NOT NULL,
	fk_question  SMALLINT UNSIGNED NOT NULL,
	PRIMARY KEY (fk_person, fk_question),
	FOREIGN KEY (fk_person) REFERENCES people(ID),
	FOREIGN KEY (fk_question) REFERENCES questions(ID)
) ENGINE=INNODB;

CREATE TABLE positionSpecificAnswers
(
	answer varchar(500),
	fk_person SMALLINT UNSIGNED NOT NULL,
	fk_question  SMALLINT UNSIGNED NOT NULL,
	fk_position SMALLINT UNSIGNED NOT NULL,
	PRIMARY KEY (fk_person, fk_question, fk_position),
	FOREIGN KEY (fk_person) REFERENCES people(ID),
	FOREIGN KEY (fk_question) REFERENCES questions(ID),
	FOREIGN KEY (fk_position) REFERENCES positions(ID)
) ENGINE=INNODB;
